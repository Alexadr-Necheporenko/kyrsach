
import os
import handlers
from aiogram import executor, types
from aiogram.types import ReplyKeyboardMarkup, ReplyKeyboardRemove
from data import config
from loader import dp, db, bot
import filters
import logging

filters.setup(dp)

WEBAPP_HOST = "0.0.0.0"
WEBAPP_PORT = int(os.environ.get("PORT", 5000))
user_message = '–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á'
#admin_message = '–ê–¥–º—ñ–Ω'


@dp.message_handler(commands='start')
async def cmd_start(message: types.Message):

    markup = ReplyKeyboardMarkup(resize_keyboard=True)

    markup.row(user_message)

    await message.answer('''–ü—Ä–∏–≤—ñ—Ç! üëã

ü§ñ –Ø –±–æ—Ç-–º–∞–≥–∞–∑–∏–Ω –¥–ª—è –ø–æ–¥–∞–∂—ñ–≤ —Ç–æ–≤–∞—Ä—ñ–≤ –ª—é–±–æ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó.
    
üõçÔ∏è –ê–±–∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞—Ç–∞–ª–æ–≥ –∏ –æ–±—Ä–∞—Ç–∏ —Ü—ñ–∫–∞–≤—ñ —Ç–æ–≤–∞—Ä–∏ –∫–æ—Ä–∏—Å—Ç—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /menu.

üí∞ –ü–æ–ø–æ–≤–Ω–∏—Ç–∏ —Ä–∞—Ö—É–Ω–æ–∫ –º–æ–∂–Ω–æ —á–µ—Ä–µ–∑... P.S (–í —Ä–æ–∑—Ä–æ–±—Ü—ñ)

‚ùì –í–∏–Ω–∏–∫–ª–∏ –ø–∏—Ç–∞–Ω–Ω—è ? –ù–µ –ø—Ä–æ–±–ª–µ–º–∞! –ö–æ–º–∞–Ω–¥–∞ /sos –¥–æ–ø–æ–º–æ–∂–µ –≤–∞–º –∑–≤'—è–∑–∞—Ç–∏—Å—è –∑ –∞–¥–º—ñ–Ω–∞–º–∏, —è–∫—ñ –Ω–∞–º–∞–≥–∞—Ç–∏–º—É—Ç—å—Å—è —è–∫ –º–æ–∂–Ω–∞ —à–≤–∏–¥—à–µ –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏.

ü§ù –ó–≤–µ—Ä—Ç–∞–π—Ç–µ—Å—è –∑ –≤—ñ–¥–≥—É–∫–∞–º–∏ @can4ez :)
    ''', reply_markup=markup)


@dp.message_handler(text=user_message)
async def user_mode(message: types.Message):

    cid = message.chat.id
    if cid in config.ADMINS:
        config.ADMINS.remove(cid)

    await message.answer('–£–≤—ñ–º–∫–Ω–µ–Ω–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏–π —Ä–µ–∂–∏–º.', reply_markup=ReplyKeyboardRemove())


#@dp.message_handler(text=admin_message)
#async def admin_mode(message: types.Message):

   # cid = message.chat.id
   # if cid not in config.ADMINS:
   #     config.ADMINS.append(cid)

    #await message.answer('–£–≤—ñ–º–∫–Ω–µ–Ω–∏–π –∞–¥–º—ñ–Ω—Å—å–∫–∏–π —Ä–µ–∂–∏–º.', reply_markup=ReplyKeyboardRemove())


async def on_startup(dp):
    logging.basicConfig(level=logging.INFO)
    db.create_tables()

    await bot.delete_webhook()
    await bot.set_webhook(config.WEBHOOK_URL)


async def on_shutdown():
    logging.warning("Shutting down..")
    await bot.delete_webhook()
    await dp.storage.close()
    await dp.storage.wait_closed()
    logging.warning("Bot down")


if __name__ == '__main__':

    if "HEROKU" in list(os.environ.keys()):

        executor.start_webhook(
            dispatcher=dp,
            webhook_path=config.WEBHOOK_PATH,
            on_startup=on_startup,
            on_shutdown=on_shutdown,
            skip_updates=True,
            host=WEBAPP_HOST,
            port=WEBAPP_PORT,
        )

    else:

        executor.start_polling(dp, on_startup=on_startup, skip_updates=False)
